# -*- coding: utf-8 -*-
"""Loop Version-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D6yXW_kce962KeqwkPiG-TXYo5DeY9Kr

# Tutorial On Python 3   
![CBSE](cbse.png)

# Python Loop

# The while statement
The while loop in Python is used to iterate over a block of code as long as the test expression (condition) is true.

Syntax of while Loop in Python
       <div class="alert alert-block alert-info">
       <font color=red>while test_expression:</font><br>
        <font color=red>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Body of while</font>
        </div>
"""

# Example 1
#initialize counter
i = 1
while i <= 10:
    i = i+1    # update counter
    print(i,end=' ')

"""# while loop with else
A loop can have an optional <b>else</b> block as well. The else part is executed if the items in the sequence used in for loop exhausts.

<font color=red>The <b>else</b> part is executed if the condition in the while loop evaluates to <b>False</b>.

The <b>while loop can be terminated with a break statement</b>. In such case, the else part is <b>ignored</b>. </font>

<font color = green>Hence, <b>a while loop's else part runs if no break occurs and the condition is false.</b></font>
"""

# Example to illustrate
# the use of else statement
# with the while loop

counter = 0

while counter < 3:
    print("Inside loop")
    counter = counter + 1
    if counter % 2==0:
        break;
else:
    print("Inside else")

# Example to illustrate
# the use of else statement and break statement
# with the while loop

counter = 0

while counter < 3:
    if counter == 2:
        break
    print("Inside loop")
    counter = counter + 1
else:
    print("Inside else")

"""# The for statement
The for loop in Python is used to iterate over a sequence <b>(list, tuple, string) or other iterable objects</b>. 

Iterating over a sequence is called traversal.

Syntax of while Loop in Python
       <div class="alert alert-block alert-info">
       <font color=red>for val in sequence:</font><br>
        <font color=red>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Body of for</font>
        </div>

Here, <b>val is the variable</b> that takes the value of the item inside the sequence on each iteration.
"""

#Example-1
for i in range(1,10):
    print(i,end=" ")

#Example-2
for i in "abes":
    print(i,end=" ")

"""# The range() function

We can generate a <b>sequence of numbers using range() function</b>. 

- range(10) will generate numbers from 0 to 9 (10 numbers)
- We can also define the start, stop and step size as range(start,stop,step size). 
- step size defaults to 1 if not provided.
"""

#The following example will clarify this.
# Output: range(0, 10)
print(range(10))

#To force this function to output all the items, we can use the function list().
# Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(list(range(10)))

# Output: [2, 3, 4, 5, 6, 7]
print(list(range(2, 8)))

# Output: [2, 5, 8, 11, 14, 17]
print(list(range(2, 20, 3)))

# Output: [2, 5, 8, 11, 14, 17]
print(list(range(20,2, -1)))

#Program to Print Table of 2

for i in range(1,11):
    print(2,"X",i,"=",2*i)

"""# for loop with else
Same concept as while with else
"""

for i in range(1,6):
    print(i)
else:
    print("All Number printed in between 1 to 5")

"""# Example"""

#Factorial of a given no
n=int(input("Enter any no"))
f=1
i=1
while i<=n:
    f=f*i
    i=i+1
print(f)

#Count the number of digit in a given number
n=int(input())
c=0
while n!=0:
    n=n//10
    c+=1
print(c)

"""# Nested Loop

- Python programming language allows to use one loop inside another loop.

<h2>Syntax</h2>
<pre class="result notranslate">for iterating_var in sequence:
   for iterating_var in sequence:
      statements(s)
   statements(s)
</pre>
<p>The syntax for a&nbsp;<strong>nested while loop</strong>&nbsp;statement in Python programming language is as follows &minus;</p>
<pre class="result notranslate">while expression:
   while expression:
      statement(s)
   statement(s)</pre>
   
### A final note on loop nesting is that you can put any type of loop inside of any other type of loop. For example a for loop can be inside a while loop or vice versa.
"""

#Example Print floyd Trinangle using for loop
n=5
i=1
for row in range(1,n+1):
    for col in range(1,row+1):
        print(i,end=" ")
        i+=1
    print()

#Example Print floyd Trinangle using while loop
n=5
row=1
i=1
while row<=n:
    col=1
    while col<=row:
        print(i,end=" ")
        i+=1
        col+=1
    row+=1
    print()

#Example Print floyd Trinangle using for and while loop
n=5
i=1
for row in range(1,n+1):
    col=1
    while col<=row:
        print(i,end=" ")
        i+=1
        col+=1
    print()

"""# break Statement

- The break is a keyword in python which is used to bring the program control out of the loop. 

- The break statement breaks the loops one by one, i.e., in the case of nested loops, it breaks the inner loop first and then proceeds to outer loops.

### The break is commonly used in the cases where we need to break the loop for a given condition.
"""

#Example-1- Below loop will break/terminate when i==5 so it print 1 to 4
for i in range(1,10):
    if i==5:
        break
    else:
        print(i,end=" ")

#Example-2 -- WAP to input a number and print it is prime or not 

n=int(input("Enter any Integer"))
for i in range(2,n):
    if n%i==0:
        print(f"{n} is not a Prime Number")
        break
else:
    print(f"{n} is a Prime Number ")

"""# continue Statement

- The continue statement in python is used to bring the program control to the beginning of the loop. 

- The continue statement skips the remaining lines of code inside the loop and start with the next iteration. 

- It is mainly used for a particular condition inside the loop so that we can skip some specific code for a particular condition.
"""

#starting a loop from 1 to 10  
for i in range(1,11):  
    if i==5:  
        continue;  
    print(i,end=" ")

"""# pass Statement

- The pass statement is a null operation since nothing happens when it is executed. 

- It is used in the cases where a statement is syntactically needed but we don't want to use any executable statement at its place.
"""

#Example
# Count the number of consonant in a given string
name="engineering "
count=0
for i in name:
    if i not in "aeiou":
        pass
    else:
        count+=1
print(count)

#Example 
for i in range(1,5):
    pass

"""# Programming Problem

<img src="loop.png" ></img>
"""