# -*- coding: utf-8 -*-
"""Loops.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VMtURY4xBaIuxUPW_Y6Y9dI2Id3fZmbY

# **Loops In Python**

It has the ability to iterate over the items of any sequence, such as a list or a string.

Syntax:

**for iterating_var in sequence:**

       statements(s)
   
If a sequence contains an expression list, it is evaluated first. Then, the first item in the sequence is assigned to the iterating variable iterating_var. Next, the statements block is executed. Each item in the list is assigned to iterating_var, and the statement(s) block is executed until the entire sequence is exhausted.
"""

x=range(1, 5)
print(x)

for i in range(10):
  print(i)
print(i)

"""In above example loop is going through range function,  now lets see, how it can traverse thorugh a string and list."""

for i in 'Python':    
   print ('Current Letter :', i)

fruits = ['banana', 'apple',  'mango']
for j in fruits:   
   print ('Current fruit :', j)

print ("Good bye!")

"""# **Iterating by Sequence Index**
An alternative way of iterating through each item is by index offset into the sequence itself. Following is a simple example, we have used 'len' function along with range.
"""

print(len(fruits))

fruits = ['banana', 'apple',  'mango']
for index in range(len(fruits)):
   print ('Current fruit :', fruits[index])  

print ("Good bye!")

"""Here, we took the assistance of the len() built-in function, which provides the total number of elements in the tuple as well as the range() built-in function to give us the actual sequence to iterate over.

# **Using else Statement with Loops**
Python supports to have an else statement associated with a loop statement

If the else statement is used with a for loop, the else statement is executed when the loop has exhausted iterating the list.

If the else statement is used with a while loop, the else statement is executed when the condition becomes false.

The following example illustrates the combination of an else statement with a for statement that searches for prime numbers from 10 through 20.
"""

for num in range(10,20): 
   for i in range(2,num):    
      if num%i == 0:         
         j=num/i             
         print ('%d equals %d * %d' % (num,i,j))
         break 
   else:                  
      print (num, 'is a prime number')

100
10000
1000000
100000000

"""# **Python while Loop Statements**
A while loop statement in Python programming language repeatedly executes a target statement as long as a given condition is true.

**Syntax**

The syntax of a while loop in Python programming language is −

while expression:

   statement(s)
   
Here, statement(s) may be a single statement or a block of statements. The condition may be any expression, and true is any non-zero value. The loop iterates while the condition is true.

When the condition becomes false, program control passes to the line immediately following the loop.

In Python, all the statements indented by the same number of character spaces after a programming construct are considered to be part of a single block of code. Python uses indentation as its method of grouping statements.
"""

count = 0
while (count < 9):
   print ('The count is:', count)
   count = count + 1

print ("Good bye!")



"""The block here, consisting of the print and increment statements, is executed repeatedly until count is no longer less than 9. With each iteration, the current value of the index count is displayed and then increased by 1.

# **The Infinite Loop**
A loop becomes infinite loop if a condition never becomes FALSE. You must use caution when using while loops because of the possibility that this condition never resolves to a FALSE value. This results in a loop that never ends. Such a loop is called an infinite loop.

An infinite loop might be useful in client/server programming where the server needs to run continuously so that client programs can communicate with it as and when required.
"""

var = 1
while var == 1 : 
   num = input("Enter a number  :")
   print ("You entered: ", num)
   var+=1

print ("Good bye!")

"""# **Using else Statement with Loops**
Python supports to have an else statement associated with a loop statement.

If the else statement is used with a for loop, the else statement is executed when the loop has exhausted iterating the list.

If the else statement is used with a while loop, the else statement is executed when the condition becomes false.

The following example illustrates the combination of an else statement with a while statement that prints a number as long as it is less than 5, otherwise else statement gets executed.
"""

count = 0
while count < 5:
   print (count, " is  less than 5")
   count = count + 1
else:
   print (count, " is not less than 5")

"""# **Single Statement Suites**
Similar to the if statement syntax, if your while clause consists only of a single statement, it may be placed on the same line as the while header.

Here is the syntax and example of a one-line while clause −
"""

flag = 0
while (flag): print ('Given flag is really true!')
print ("Good bye!")

"""# **More Examples to Practice:**

Print * sequence in Incremental new line order
"""

n=int(input('enter n'))
k=1
for i in range(0,n):
  #for j in range(0,i+1):
   k=k*100
   print(k,end="")
   print("\r")

"""Using Nested Loop Print prime number from 2 to 100"""

i=2
while(i<100):
  j=2
  while(j<=(i/j)):
    if not(i%j): break
    j=j+1
  if(j>i/j):
    print(i, " is prime")
  i=i+1

for i in range(5):
  if i==2:
    break
  print (i)