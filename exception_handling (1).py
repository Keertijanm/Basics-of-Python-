# -*- coding: utf-8 -*-
"""Exception Handling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B1WOY3C-fc3DBO4elut_pWheFghoH3iw

# Python Try Except

### The try block lets you test a block of code for errors.

### The except block lets you handle the error.

### The finally block lets you execute code, regardless of the result of the try- and except blocks.

# Exception Handling
#### When an error occurs, or exception as we call it, Python will normally stop and generate an error message.

#### These exceptions can be handled using the try statement:
"""

try:
  print(k)
except:
  print("An exception occurred")

"""##### Since the try block raises an error, the except block will be executed.

Without the try block, the program will crash and raise an error:
"""

print(k)

"""### Many Exceptions
You can define as many exception blocks as you want, e.g. if you want to execute a special block of code for a special kind of error:
"""

y=2
try:
  print(1/0)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")

"""### Else
You can use the else keyword to define a block of code to be executed if no errors were raised:
"""

x=2
try:
  print(x)
except:
  print("Something went wrong")
else:
  print("Nothing went wrong")

"""### Finally
### The finally block, if specified, will be executed regardless if the try block raises an error or not.
"""

try:
  print("hello")
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")

"""### Raise an exception
As a Python developer you can choose to throw an exception if a condition occurs.

To throw (or raise) an exception, use the raise keyword.
"""

x = -1

if x < 0:
    raise Exception("Sorry, no numbers below zero")

"""## The raise keyword is used to raise an exception.

You can define what kind of error to raise, and the text to print to the user.
"""

x = "hello"

if type(x) is not int:
  raise TypeError("Only integers are allowed")

"""## Common Exceptions
A list of common exceptions that can be thrown from a normal python program is given below.

* ZeroDivisionError: Occurs when a number is divided by zero.
* NameError: It occurs when a name is not found. It may be local or global.
* IndentationError: If incorrect indentation is given.
* IOError: It occurs when Input Output operation fails.
* EOFError: It occurs when the end of the file is reached, and yet operations are being performed.
"""

a = int(input("Enter a:"))  
b = int(input("Enter b:"))  
c = a/b
print("a/b =",c)  
  
#other code:  
print("Hi I am other part of the program")

try:  
    a = int(input("Enter a:"))  
    b = int(input("Enter b:"))  
    c = a/b  
    print("a/b = d",c)  
except:  
    print("can't divide by zero")  
else:  
    print("Hi I am else block")

try:  
    a = int(input("Enter a:"))  
    b = int(input("Enter b:"))  
    c = a/b;  
    print("a/b = %d"%c)  
except:  
    print("can't divide by zero")  
else:  
    print("Hi I am else block")

"""## Points to remember

* We can declare multiple exceptions in the except statement since the try block may contain the statements which throw the different type of exceptions.
* We can also specify an else block along with the try-except statement which will be executed if no exception is raised in the try block.
* The statements that don't throw the exception should be placed inside the else block.

## Declaring multiple exceptions
### The python allows us to declare the multiple exceptions with the except clause. Declaring multiple exceptions is useful in the cases where a try block throws multiple exceptions.
"""

try:    
    a=10/0
except (ArithmeticError,TypeError, ZeroDivisionError):    
    print ("Arithmetic Exception")    
else:    
    print ("Successfully Done" )

try:  
    age = int(input("Enter the age?"))  
    if age<18:  
        raise ValueError;  
    else:  
        print("the age is valid")  
except ValueError:  
    print("The age is not valid")